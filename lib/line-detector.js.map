{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/line-detector.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n#-----------------------------------------------------------------------------------------------------------\n# source_elements = ( document.querySelector '.sample' ).childNodes\n{ log\n  warn\n  debug }       = console\n# after           = ( dts, f  ) => new Promise ( resolve ) => setTimeout  ( -> resolve f() ), dts * 1000\n# sleep           = ( dts     ) -> debug '^2-1^'; new Promise ( resolve ) => debug '^2-2^'; setTimeout  resolve,            dts * 1000\n# defer           = ( f = ->  ) => await sleep 0; return await f()\n\n#-----------------------------------------------------------------------------------------------------------\nremove_boxes = ->\n  element.remove() for element in document.querySelectorAll '.box'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndraw_boxes = ( rectangles ) ->\n  return ( draw_box rectangle for rectangle in rectangles )\n\n#-----------------------------------------------------------------------------------------------------------\ndraw_box = ( rectangle ) ->\n  box               = document.createElement 'div'\n  box.style.top     = document.documentElement.scrollTop  + rectangle.y       + 'px'\n  box.style.left    = document.documentElement.scrollLeft + rectangle.x       + 'px'\n  box.style.width   =                                       rectangle.width - 1   + 'px' # collapse borders\n  box.style.height  =                                       rectangle.height  + 'px'\n  box.classList.add 'box'\n  document.body.appendChild box\n  return box\n\n#-----------------------------------------------------------------------------------------------------------\nselect_next_chr = ( c1, c2, nodes_crossed, node ) ->\n  # count++\n  # return null if count > 1000\n  ### TAINT do this outside the method to avoid duplication ###\n  ref_range   = document.createRange()\n  ref_range.setStartBefore  node\n  ref_range.setEndAfter     node\n  TraverseUtil.getNextChar c1, c2, nodes_crossed, false\n  selection   = TraverseUtil.setSelection c1, c2\n  range       = selection.getRangeAt 0\n  rectangles  = range.getClientRects()\n  # debug '^2424^', boxes\n  # debug '^2424^', ( node.contains range.startContainer.parentNode ), node.contains range.endContainer.parentNode\n  # debug '^321^', ( ref_range.intersectsNode range.startContainer.parentNode ), ( ref_range.intersectsNode range.endContainer.parentNode )\n  return false unless node.contains range.startContainer.parentNode\n  return false unless node.contains range.endContainer.parentNode\n    # µ.DOM.remove box for box in boxes\n  # debug '^2424^', \"nodes_crossed\", nodes_crossed.length\n  # return nodes_crossed.every ( n ) -> node.contains n\n  boxes       = draw_boxes rectangles\n  return true\n\n#===========================================================================================================\nµ.DOM.ready ->\n  log '^123-7^', \"ready\"\n  nodes_crossed = []\n  nodes         = µ.DOM.select_all '#p4'\n  p             = nodes[ 0 ].childNodes[ 0 ]\n  c1            = new Cursor( p, 0, p.data )\n  c2            = new Cursor( p, 0, p.data )\n  TraverseUtil.setSelection( c1, c2 )\n  #.........................................................................................................\n  f = ->\n    return null unless select_next_chr c1, c2, nodes_crossed, nodes[ 0 ]\n    log nodes_crossed\n    log ( nodes[ 0 ].contains crossed_node for crossed_node in nodes_crossed )\n    setTimeout f, 0\n  # f()\n  loop\n    break unless select_next_chr c1, c2, nodes_crossed, nodes[ 0 ]\n  return null\n\n\n\n\n\n\n"
  ]
}