{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/line-detector.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n#-----------------------------------------------------------------------------------------------------------\nsource_elements = ( document.querySelector '.sample' ).childNodes\nbutton          = document.querySelector '.button'\n\n#-----------------------------------------------------------------------------------------------------------\n_remove_boxes = ->\n  for element in document.querySelectorAll '.box'\n    element.remove()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndraw_boxes = ( rectangles ) ->\n  _remove_boxes()\n  for rectangle in rectangles\n    box = document.createElement \"div\"\n    box.classList.add( \"box\" )\n    box.style.top     = rectangle.y + \"px\"\n    box.style.left    = rectangle.x + \"px\"\n    box.style.width   = rectangle.width + \"px\"\n    box.style.height  = rectangle.height + \"px\"\n    document.body.appendChild box\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nbutton.addEventListener 'click', ( event ) ->\n  console.group \"Rendered Lines of Text\"\n  for source_element in source_elements\n    console.group \"Element\"\n    console.log source_element\n    for line, idx in extract_lines_from_text_node source_element\n      console.log idx + 1, line\n  console.groupEnd()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ncollapse_ws = ( value ) -> value.trim().replace /\\s+/g, ' '\n\n#-----------------------------------------------------------------------------------------------------------\nextract_lines_from_text_node = ( text_node ) ->\n  unless text_node.nodeType is 3\n    throw new Error \"Lines can only be extracted from text nodes.\"\n  #.........................................................................................................\n  # A Range represents a fragment of the document which contains nodes and\n  # parts of text nodes. One thing that's really cool about a Range is that we\n  # can access the bounding boxes that contain the contents of the Range. By\n  # incrementally adding characters - from our text node - into the range, and\n  # then looking at the Range's client rectangles, we can determine which\n  # characters belong in which rendered line.\n  textContent     = text_node.textContent\n  range           = document.createRange()\n  lines           = []\n  line_chrs       = []\n  #.........................................................................................................\n  # Iterate over every character in the text node.\n  for chr_idx in [ 0 ... textContent.length ]\n    # Set the range to span from the beginning of the text node up to and\n    # including the current character (offset).\n    range.setStart  text_node, 0\n    range.setEnd    text_node, chr_idx + 1\n    # At this point, the Range's client rectangles will include a rectangle\n    # for each visually-rendered line of text. Which means, the last\n    # character in our Range (the current character in our for-loop) will be\n    # the last character in the last line of text (in our Range). As such, we\n    # can use the current rectangle count to determine the line of text.\n    line_idx = range.getClientRects().length - 1\n    # If this is the first character in this line, create a new buffer for this line.\n    unless lines[ line_idx ]?\n      line_chrs = []\n      lines.push line_chrs\n    # Add this character to the currently pending line of text.\n    line_chrs.push textContent.charAt chr_idx\n  lines = ( chrs.join '' for chrs in lines )\n  draw_boxes range.getClientRects()\n  return lines\n\n\n\n\n\n\n\n"
  ]
}