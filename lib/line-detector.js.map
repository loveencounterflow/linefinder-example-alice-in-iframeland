{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/line-detector.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n#-----------------------------------------------------------------------------------------------------------\n# source_elements = ( document.querySelector '.sample' ).childNodes\n{ log\n  warn\n  debug }       = console\n# after           = ( dts, f  ) => new Promise ( resolve ) => setTimeout  ( -> resolve f() ), dts * 1000\n# sleep           = ( dts     ) -> debug '^2-1^'; new Promise ( resolve ) => debug '^2-2^'; setTimeout  resolve,            dts * 1000\n# defer           = ( f = ->  ) => await sleep 0; return await f()\n\n#-----------------------------------------------------------------------------------------------------------\nremove_boxes = ->\n  element.remove() for element in document.querySelectorAll '.box'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndraw_boxes = ( rectangles ) ->\n  return ( draw_box rectangle for rectangle in rectangles )\n\n#-----------------------------------------------------------------------------------------------------------\ndraw_box = ( rectangle ) ->\n  box               = document.createElement 'div'\n  box.style.top     = document.documentElement.scrollTop  + rectangle.top       + 'px'\n  box.style.left    = document.documentElement.scrollLeft + rectangle.left      + 'px'\n  box.style.width   =                                       rectangle.width - 1 + 'px' # collapse borders\n  box.style.height  =                                       rectangle.height    + 'px'\n  box.classList.add 'box'\n  document.body.appendChild box\n  return box\n\n#-----------------------------------------------------------------------------------------------------------\n_get_next_chr_rectangles = ( node, c1, c2 ) ->\n  TraverseUtil.getNextChar c1, c2, [], false\n  selection   = TraverseUtil.setSelection c1, c2\n  range       = selection.getRangeAt 0\n  return null unless node.contains range.startContainer.parentNode\n  return null unless node.contains range.endContainer.parentNode\n  rectangles  = range.getClientRects()\n  return rectangles\n\n#-----------------------------------------------------------------------------------------------------------\nwalk_chr_rectangles_of_node = ( node ) ->\n  text_node     = node.childNodes[ 0 ]\n  c1            = new Cursor text_node, 0, text_node.data\n  c2            = new Cursor text_node, 0, text_node.data\n  TraverseUtil.setSelection c1, c2\n  loop\n    rectangles = _get_next_chr_rectangles node, c1, c2\n    break unless rectangles?\n    yield from rectangles\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n_reset_line_walker = ( s ) ->\n  s.min_top       = +Infinity\n  s.max_bottom    = -Infinity\n  s.min_left      = +Infinity\n  s.max_right     = -Infinity\n  s.avg_height    = 0\n  s.avg_bottom    = 0\n  s.prv_bottom    = null\n  s.count         = 0\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nwalk_line_rectangles_of_node = ( node ) ->\n  _reset_line_walker s  = {}\n  xxx_height_factor     = 1 / 2 ### relative minimum height to recognize line step ###\n  for rectangle from walk_chr_rectangles_of_node node\n    if s.count > 0 and rectangle.bottom - s.avg_bottom > s.avg_height * xxx_height_factor\n      yield # new Rectangle\n        left:   s.min_left\n        top:    s.min_top\n        width:  s.max_right   - s.min_left\n        height: s.max_bottom  - s.min_top\n      _reset_line_walker s\n    #.......................................................................................................\n    # draw_box rectangle\n    s.count++\n    s.min_top     = Math.min s.min_top,     rectangle.top\n    s.max_bottom  = Math.max s.max_bottom,  rectangle.bottom\n    s.min_left    = Math.min s.min_left,    rectangle.left\n    s.max_right   = Math.max s.max_right,   rectangle.right\n    s.avg_height  = ( s.avg_height * ( s.count - 1 ) / s.count ) + ( rectangle.height * 1 / s.count )\n    s.avg_bottom  = ( s.avg_bottom * ( s.count - 1 ) / s.count ) + ( rectangle.bottom * 1 / s.count )\n    s.prv_bottom = rectangle.bottom\n  #.........................................................................................................\n  if s.count > 0\n    yield # new Rectangle\n      left:   s.min_left\n      top:    s.min_top\n      width:  s.max_right   - s.min_left\n      height: s.max_bottom  - s.min_top\n  return null\n\n#===========================================================================================================\nµ.DOM.ready ->\n  log '^123-7^', \"ready\"\n  nodes         = µ.DOM.select_all 'p'\n  for node in nodes\n    for rectangle from walk_line_rectangles_of_node node\n      draw_box rectangle\n  return null\n\n\n\n\n\n\n"
  ]
}