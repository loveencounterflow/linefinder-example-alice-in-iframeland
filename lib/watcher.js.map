{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/watcher.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'GUY/temp/tests'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\n# { freeze }                = require 'letsfreezethat'\n# H                         = require './helpers'\n# types                     = new ( require 'intertype' ).Intertype()\n# { isa\n#   declare\n#   type_of\n#   validate\n#   equals }                = types\n{ Pipeline\n  Async_pipeline\n  $         }             = require 'moonriver'\n{ after\n  defer\n  sleep }                 = GUY.async\nfile_dt                   = 0.2 # seconds to sleep between file actions\n#...........................................................................................................\nG                         = {}\ndo ->\n  G.project_path  = PATH.dirname __dirname\n  G.public_path   = PATH.join G.project_path, 'public'\n\n\n#===========================================================================================================\nxxx =\n\n  #---------------------------------------------------------------------------------------------------------\n  $log_all: -> ( d ) => # whisper GUY.datetime.now(), '^345-1^', 'pipeline', d\n\n  #---------------------------------------------------------------------------------------------------------\n  $add_as_change: -> ( d, send ) =>\n    d.key = 'change' if d.key is 'add'\n    send d\n\n  #---------------------------------------------------------------------------------------------------------\n  $add_file_info: -> ( d, send ) =>\n    return send d unless d.path?\n    e           = PATH.parse d.path\n    d.home      = e.dir\n    d.filename  = e.base\n    d.extension = e.ext\n    d.barename  = e.name\n    send d\n\n  #---------------------------------------------------------------------------------------------------------\n  $html_from_md: -> ( d, send ) =>\n    return send d unless d.key is 'change'\n    return send d unless d.extension is '.md'\n    #.......................................................................................................\n    { $: zx }       = await import( 'zx' )\n    source_path     = d.path\n    public_filename = \"#{d.barename}.html\"\n    public_path     = PATH.join G.public_path,  public_filename\n    help GUY.datetime.now(), '^$html_from_md@345-2^', GUY.trm.reverse \" #{d.filename} -> #{public_filename} \"\n    #.......................................................................................................\n    GUY.temp.with_directory { prefix: 'lfxaiif', }, ({ path: tmp_dir_path }) ->\n      tmp_path        = PATH.join tmp_dir_path,     public_filename\n      ### TAINT rewrite by using functions that call `zx`, catch errors, wait ###\n      try\n        await zx\"\"\"pandoc -o #{tmp_path} #{source_path}\"\"\"\n      catch error\n        message = error.message ? error\n        warn '^$html_from_md@345-3^', GUY.trm.reverse \" #{message} \"\n      #.......................................................................................................\n      try\n        await zx\"\"\"echo '<!DOCTYPE html>' | cat - #{tmp_path} > #{public_path}\"\"\"\n      catch error\n        message = error.message ? error\n        warn '^$html_from_md@345-4^', GUY.trm.reverse \" #{message} \"\n      await sleep file_dt\n    #.......................................................................................................\n    info GUY.datetime.now(), '^$html_from_md@345-5^', GUY.trm.reverse \" OK #{d.filename} -> #{public_filename} \"\n      # date +\"%Y-%m-%d %H:%M:%S\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $reload: ( server ) -> ( d ) =>\n    server.reloadBrowserWindow()\n    return null\n\n#===========================================================================================================\ncreate_pipeline = ( server ) ->\n  pipeline        = new Async_pipeline()\n  pipeline.push xxx.$log_all()\n  pipeline.push xxx.$add_as_change()\n  pipeline.push xxx.$add_file_info()\n  pipeline.push xxx.$html_from_md()\n  pipeline.push xxx.$reload server\n  return pipeline\n\n\n#===========================================================================================================\nclass My_watcher extends GUY.watch.Watcher\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( pipeline ) ->\n    super { ignored: /(^|\\/)\\..|node_modules/, }\n    @pipeline = pipeline\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  on_all: ( key, path = null ) ->\n    return null unless path?\n    whisper GUY.datetime.now(), '^345-7^', GUY.trm.reverse 'my_watcher', key, path\n    @pipeline.send { key, path, }\n    null for await d from @pipeline.walk()\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo = -> new Promise ( resolve, reject ) =>\n  FiveServer = ( require 'five-server' ).default\n  cfg =\n    open:           false\n    root:           './public'\n    host:           '0.0.0.0'\n    ignore:         /.*/\n    https:          true\n    wait:           1000 # ms\n  # debug '^43457640^', k for k from GUY.props.walk_keys ( new FiveServer()), { hidden: true, }\n  server      = new FiveServer()\n  pipeline    = create_pipeline server\n  watcher     = new My_watcher pipeline\n  watcher.add_path PATH.join G.project_path, 'pages/**/*.md'\n  watcher.add_path PATH.join G.project_path, 'public/**/*.css'\n  watcher.add_path PATH.join G.project_path, 'public/**/*.js'\n  watcher.add_path PATH.join G.project_path, 'public/**/*.html'\n  server.start cfg\n  server.reloadBrowserWindow()\n  return resolve()\n\n\n############################################################################################################\nif require.main is module then do =>\n  await demo()\n  # await demo_zx()\n\n"
  ]
}