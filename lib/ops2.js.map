{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/ops2.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\nglobalThis.log = console.log\nglobalThis.debug = console.debug\n\n\n###\n\nentities:\n\n  * iframes / target boxes\n    * linearly ordered so text flows from one to the next\n      * each with width, height, position on page\n    * for now:\n      * no automatic creation\n      * width held constant across iframes\n      * position on page irrelevant\n\n  * galley:\n    * has maximum width of all target frames\n    * has margins above, below of at least the maximum target height\n    * extensions:\n      * when one flow should go into targets with differing widths, need to add\n        floating divs left and right to constrain and position lines using CSS\n        `shape-outside` (and analogous `clip-path` for visualization)\n        `d.style.setProperty( '--path', getComputedStyle(d).getPropertyValue('--path') + ', 20mm 50mm' )`\n\n###\n\n#===========================================================================================================\nnext_slug   = ( walker ) -> d = walker.next(); { slug:    d.value, slugs_done:    d.done, }\nnext_node   = ( walker ) -> d = walker.next(); { node:    d.value, nodes_done:    d.done, }\nnext_iframe = ( walker ) ->\n  { value: iframe, done: iframes_done, } = walker.next()\n  return { iframes_done, } if iframes_done\n  local_linefinder = new iframe.contentWindow.µ.LINEFINDER.Linefinder()\n  return {\n    iframe:           iframe,\n    iframe_height:    ( µ.DOM.get_height iframe ),\n    galley_document:  iframe.contentDocument,\n    galley_window:    iframe.contentWindow,\n    iframes_done:     iframes_done,\n    ### TAINT may want to return `linefinder` itself ###\n    galley_draw_box:  ( local_linefinder.draw_box.bind local_linefinder ), }\n\n#===========================================================================================================\nreset_state = ( state ) ->\n  state.first_slug  = null\n  state.top         = null\n  state.height      = null\n  return state\n\n#===========================================================================================================\nµ.DOM.ready ->\n  log '^123-8^', \"ready\"\n  #.........................................................................................................\n  if µ.DOM.page_is_inside_iframe()\n    log '^123-9^', \"leaving b/c document is loaded in iframe\"\n    return null\n  #.........................................................................................................\n  iframes = µ.DOM.select_all 'iframe'\n  unless iframes.length > 0\n    log '^123-10^', \"leaving b/c document does not have iframes\"\n    return null\n  #.........................................................................................................\n  ### Allow user-scrolling for demo ###\n  # µ.DOM.set iframe, 'scrolling', 'true' for iframe in µ.DOM.select_all 'iframe'\n  #.........................................................................................................\n  iframe_walker       = iframes.values()\n  { iframe\n    iframes_done\n    iframe_height\n    galley_document\n    galley_window\n    galley_draw_box } = next_iframe iframe_walker\n  #.........................................................................................................\n  node_walker       = ( galley_document.querySelectorAll 'galley > p' ).values()\n  linefinder        = new galley_window.µ.LINEFINDER.Linefinder()\n  #.........................................................................................................\n  xxx_count         = 0\n  state             = {}\n  ### TAINT prefer to use `new State()`? ###\n  reset_state state\n  #.........................................................................................................\n  loop\n    break if xxx_count++ > 500 ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n    { node\n      nodes_done    } = next_node node_walker\n    log '^123-1^', node, nodes_done\n    #.......................................................................................................\n    if nodes_done\n      # might want to mark galleys without content at this point\n      log '^123-1^', \"nodes done\"\n      break\n    #.......................................................................................................\n    slug_walker       = linefinder.walk_slugs_of_node node\n    loop\n      break if xxx_count++ > 500 ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n      { slug\n        slugs_done  } = next_slug slug_walker\n      if slugs_done\n        log '^123-1^', \"slugs done\"\n        break\n      #.......................................................................................................\n      unless state.first_slug?\n        ### TAINT code duplication; use method ###\n        state.first_slug    = slug\n        state.top           = state.first_slug.rectangle.top\n        state.height        = 0\n        galley_window.scrollTo { top: state.top, }\n      #.......................................................................................................\n      state.height = slug.rectangle.bottom - state.top\n      galley_draw_box slug.rectangle\n      continue if iframe_height > state.height\n      #.......................................................................................................\n      { iframe\n        iframes_done\n        iframe_height\n        galley_document\n        galley_window\n        galley_draw_box } = next_iframe iframe_walker\n      reset_state state\n      if iframes_done\n        log '^123-1^', \"iframes done\"\n        break\n      ### TAINT code duplication; use method ###\n      state.first_slug    = slug\n      state.top           = state.first_slug.rectangle.top\n      state.height        = 0\n      galley_window.scrollTo { top: state.top, }\n\n  return null\n\n\n\n###\n  button  = µ.DOM.select_first '#redraw'\n  µ.DOM.on button, 'click', ->\n    debug '^123-14^', \"redraw\"\n    draw_client_rectangles()\n  return null\n###\n\n\n\n"
  ]
}