{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/ops2.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\nglobalThis.log = console.log\n\n```\n// // wrap an element with another; super basic but makes it consistent across our apps\n// function wrap(el, wrapper) {\n//   // ### TAINT issue error message\n//   // if (el && el.parentNode) {\n//     el.parentNode.insertBefore(wrapper, el);\n//     wrapper.appendChild(el);\n//   // }\n// }\n\n// // Wrap an HTMLElement around each element in an HTMLElement array.\n// const wrap = function( element, wrapper ) {\n//     // Convert `elms` to an array, if necessary.\n//     // Loops backwards to prevent having to clone the wrapper on the\n//     // first element (see `child` below).\n//         var child = ( false ) ? wrapper.cloneNode(true) : wrapper;\n\n//         // Cache the current parent and sibling.\n//         var parent  = element.parentNode;\n//         var sibling = element.nextSibling;\n\n//         // Wrap the element (is automatically removed from its current\n//         // parent).\n//         child.appendChild(element);\n\n//         // If the element had a sibling, insert the wrapper before\n//         // the sibling to maintain the HTML structure; otherwise, just\n//         // append it to the parent.\n//         if (sibling) {\n//             parent.insertBefore(child, sibling);\n//         } else {\n//             parent.appendChild(child);\n//         }\n//     };\n\n\n```\n\n```\nfunction addClientRectsOverlay( element ) {\n  /* Absolutely position a div over each client rect so that its border width\n     is the same as the rectangle's width.\n     Note: the overlays will be out of place if the user resizes or zooms. */\n  const rectangles = element.getClientRects();\n  for (const rectangle of rectangles) {\n    const  marker = document.createElement('div');\n    µ.DOM.add_class( marker, 'µ-clientrec' );\n    marker.style.position           = 'absolute';\n    // marker.style.outline            = '1px solid red';\n    // marker.style.backgroundColor    = 'rgba(255,255,0,0.5)';\n    // marker.style.mixBlendMode       = 'multiply';\n    const scroll_top                = µ.DOM2.get_document_scroll_top();\n    const scroll_left               = µ.DOM2.get_document_scroll_left();\n    marker.style.margin             = '0';\n    marker.style.padding            = '0';\n    marker.style.top                = `${ rectangle.top  + scroll_top   }px`;\n    marker.style.left               = `${ rectangle.left + scroll_left  }px`;\n    marker.style.width              = `${ rectangle.width               }px`;\n    marker.style.height             = `${ rectangle.height              }px`;\n    document.body.appendChild( marker);\n  }\n}\n\n//-----------------------------------------------------------------------------------------------------------\n//-----------------------------------------------------------------------------------------------------------\n//-----------------------------------------------------------------------------------------------------------\n\n// https://stackoverflow.com/a/63984037/7568091\n\n// createRange from DOM element, then getBoundingClientRect for coarse, getClientRects for\n// refined estimates of position\n/*\nconst el = document.querySelector(\"#my-element\");\nconst range = document.createRange();\nrange.setStart(el, 0);\nrange.setEnd(el, 200);\n\n// A single rect for the entire range\nconst rect = range.getBoundingClientRect();\n\n// An array of rectangles for each line of the range\nconst rectangles = range.getClientRects();\n*/\n\n//-----------------------------------------------------------------------------------------------------------\n//-----------------------------------------------------------------------------------------------------------\n//-----------------------------------------------------------------------------------------------------------\n\n\n\n```\n\nwrap_inner = ( element, wrapper ) ->\n  element.appendChild(wrapper);\n  while element.firstChild isnt wrapper\n     wrapper.appendChild element.firstChild\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndraw_client_rectangles = =>\n  elements = µ.DOM.select_all '.tracker > div > span'\n  for element in elements\n    # wrapper = µ.DOM.parse_one '<span></span>'\n    # wrap element, wrapper\n    # log '^123-1^', wrapper\n    addClientRectsOverlay element\n  return null\n\n->\n  for element in µ.DOM.select_all '.tracker > div'\n    wrapper           = µ.DOM.parse_one '<span></span>'\n    wrapper.innerHTML = element.innerHTML\n    element.innerHTML = wrapper.outerHTML\n\ndo ->\n  for element in µ.DOM.select_all '.tracker > div'\n    wrapper = µ.DOM.parse_one '<span></span>'\n    wrap_inner element, wrapper\n  return null\n\n# $( \".tracker > div\" ).wrapInner( '<span></span>' )\nµ.DOM.ready draw_client_rectangles\nlog '^123-2^', \"ops2 OK\"\n\ndo ->\n  window.pageYOffset\n  scroll_top = document.body.scrollTop\n  for div in µ.DOM.select_all '.tracker > div'\n    # offset_top = µ.DOM.get_offset_top div\n    offset_top = div.offsetTop\n    log '^123-3^', { scroll_top, offset_top, }\n    p_cr  = div.getClientRects()[ 0 ]\n    p_y1  = p_cr.y\n    p_y2  = p_y1 + p_cr.height\n    span  = µ.DOM.select_first_from div, 'span'\n    log '^123-4^', { y: p_cr.y, p_y1, p_y2, }\n    log '^123-5^', span\n    for cr in span.getClientRects()\n      y1  = cr.y\n      y2  = y1 + cr.height\n      log '^123-6^', { y1, y2, }\n    break\n  return null\n\n\nµ.DOM.ready ->\n  log '^345-1^', \"set up scroll events\"\n  µ.DOM.on document, 'scroll', ->\n    log '^345-1^', 'scroll', µ.DOM.get_document_scroll_top()\n    return null\n  handler = ->\n    log '^345-2^', 'scroll tracker'\n  ( µ.DOM.select_first '.tracker' ).addEventListener 'scroll', handler, true\n\n"
  ]
}