{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/ops2.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,sBAAA,EAAA,OAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA;;EAGA,UAAU,CAAC,GAAX,GAAiB,OAAO,CAAC;;EACzB,UAAU,CAAC,CAAX,GAAe,OAAA,CAAQ,OAAR;;EAEf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAsCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA5CA;;;EAoGA,sBAAA,GAAyB,CAAA,CAAA,GAAA;AACzB,QAAA,OAAA,EAAA,QAAA,EAAA,CAAA,EAAA;IAAE,QAAA,GAAW,CAAC,CAAC,GAAG,CAAC,UAAN,CAAiB,uBAAjB;IACX,KAAA,0CAAA;4BAAA;;;;MAIE,qBAAA,CAAsB,OAAtB;IAJF;AAKA,WAAO;EAPgB;;AASzB;EAAA,KAAA,qCAAA;;IACE,OAAA,GAAoB,CAAC,CAAC,GAAG,CAAC,SAAN,CAAgB,eAAhB;IACpB,OAAO,CAAC,SAAR,GAAoB,OAAO,CAAC;IAC5B,OAAO,CAAC,SAAR,GAAoB,OAAO,CAAC;EAH9B,CA7GA;;;EAmHA,CAAC,CAAC,GAAG,CAAC,KAAN,CAAY,sBAAZ;;EACA,GAAA,CAAI,SAAJ,EAAe,SAAf;AApHA",
  "sourcesContent": [
    "\n'use strict'\n\n\nglobalThis.log = console.log\nglobalThis.µ = require 'mudom'\n\n```\n// // wrap an element with another; super basic but makes it consistent across our apps\n// function wrap(el, wrapper) {\n//   // ### TAINT issue error message\n//   // if (el && el.parentNode) {\n//     el.parentNode.insertBefore(wrapper, el);\n//     wrapper.appendChild(el);\n//   // }\n// }\n\n// // Wrap an HTMLElement around each element in an HTMLElement array.\n// const wrap = function( element, wrapper ) {\n//     // Convert `elms` to an array, if necessary.\n//     // Loops backwards to prevent having to clone the wrapper on the\n//     // first element (see `child` below).\n//         var child = ( false ) ? wrapper.cloneNode(true) : wrapper;\n\n//         // Cache the current parent and sibling.\n//         var parent  = element.parentNode;\n//         var sibling = element.nextSibling;\n\n//         // Wrap the element (is automatically removed from its current\n//         // parent).\n//         child.appendChild(element);\n\n//         // If the element had a sibling, insert the wrapper before\n//         // the sibling to maintain the HTML structure; otherwise, just\n//         // append it to the parent.\n//         if (sibling) {\n//             parent.insertBefore(child, sibling);\n//         } else {\n//             parent.appendChild(child);\n//         }\n//     };\n\n\n```\n\n```\nfunction addClientRectsOverlay( element ) {\n  /* Absolutely position a div over each client rect so that its border width\n     is the same as the rectangle's width.\n     Note: the overlays will be out of place if the user resizes or zooms. */\n  const rectangles = element.getClientRects();\n  for (const rectangle of rectangles) {\n    const  marker = document.createElement('div');\n    µ.DOM.add_class( marker, 'µ-clientrec' );\n    marker.style.position           = 'absolute';\n    // marker.style.outline            = '1px solid red';\n    // marker.style.backgroundColor    = 'rgba(255,255,0,0.5)';\n    // marker.style.mixBlendMode       = 'multiply';\n    const scroll_top                = document.body.scrollTop;\n    const scroll_left               = document.body.scrollLeft;\n    marker.style.margin             = '0';\n    marker.style.padding            = '0';\n    marker.style.top                = `${rectangle.top  + scroll_top}px`;\n    marker.style.left               = `${rectangle.left + scroll_left}px`;\n    // We want rectangle.width to be the border width, so content width is 2px less.\n    marker.style.width              = `${rectangle.width}px`;\n    marker.style.height             = `${rectangle.height}px`;\n    document.body.appendChild( marker);\n  }\n}\n\n//-----------------------------------------------------------------------------------------------------------\n//-----------------------------------------------------------------------------------------------------------\n//-----------------------------------------------------------------------------------------------------------\n\n// https://stackoverflow.com/a/63984037/7568091\n\n// createRange from DOM element, then getBoundingClientRect for coarse, getClientRects for\n// refined estimates of position\n/*\nconst el = document.querySelector(\"#my-element\");\nconst range = document.createRange();\nrange.setStart(el, 0);\nrange.setEnd(el, 200);\n\n// A single rect for the entire range\nconst rect = range.getBoundingClientRect();\n\n// An array of rectangles for each line of the range\nconst rectangles = range.getClientRects();\n*/\n\n//-----------------------------------------------------------------------------------------------------------\n//-----------------------------------------------------------------------------------------------------------\n//-----------------------------------------------------------------------------------------------------------\n\n\n\n```\n\n#-----------------------------------------------------------------------------------------------------------\ndraw_client_rectangles = =>\n  elements = µ.DOM.select_all '.tracker > div > span'\n  for element in elements\n    # wrapper = µ.DOM.parse_one '<span></span>'\n    # wrap element, wrapper\n    # log '^123-3^', wrapper\n    addClientRectsOverlay element\n  return null\n\nfor element in µ.DOM.select_all '.tracker > div'\n  wrapper           = µ.DOM.parse_one '<span></span>'\n  wrapper.innerHTML = element.innerHTML\n  element.innerHTML = wrapper.outerHTML\n\n# $( \".tracker > div\" ).wrap( \"<span></span>\" )\nµ.DOM.ready draw_client_rectangles\nlog '^123-4^', \"ops2 OK\"\n\n\n\n"
  ]
}